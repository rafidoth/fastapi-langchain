from fastapi import FastAPI, HTTPException,File, UploadFile, WebSocket
import uuid
import os
import io
from dotenv import load_dotenv  
from groq import Groq
from pydantic import BaseModel

load_dotenv()


app = FastAPI()

GROQ_API_KEY = os.getenv("GROQ_API_KEY")
GROQ_API_URL = "https://api.groq.com/openai/v1/audio/transcriptions"
MODEL_NAME = "distil-whisper-large-v3-en"  


client = Groq(api_key=GROQ_API_KEY)


class GroqTranscriptResponse(BaseModel):
    text : str
    request_id : str



async def transcribe_audio(audio_bytes : bytes , prompt : str):
    if not GROQ_API_KEY:
        raise HTTPException(status_code=500, detail="GROQ_API_KEY not set.")
    try:
        # audio_bytes = await file.read()
        audio_file = io.BytesIO(audio_bytes)
        audio_file.name = "aud.webm"
        transcription = client.audio.transcriptions.create(
          file=(audio_file.name, audio_file, "audio/webm"),
          model="whisper-large-v3",
          prompt= prompt,
          response_format="json",  # Optional
          language="en",  # Optional
          temperature=0.0  # Optional
        )
        response_text = transcription.text
        response_request_id = transcription.x_groq['id']
        return GroqTranscriptResponse(text=response_text, request_id=response_request_id)

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

# class State(BaseModel):
#     x : float = 0.0
#     y : float = 0.0






class ConnectionManager:
    def __init__(self) -> None:
        self.connections : dict[str, WebSocket] = {}
        self.users : dict[str, str] = {}
        self.transcriptions : dict[str, list[GroqTranscriptResponse]] = {}

    async def receive_message(self, id : str):
            ws = self.connections[id]
            data = await ws.receive_bytes()
            if data :
                print("Receiving message from ", self.users[id])
            prompt = "This is a start of a conversation. Please transcribe the audio and send it back to me."
            if len(self.transcriptions[id]) > 0 :
                last_response_id = self.transcriptions[id][-1].request_id
                prompt = "This is a continuation of the previous conversation of request id "
                prompt += str(last_response_id) 
                prompt += " . Please transcribe the audio and send it back to me."""

            response = await transcribe_audio(data, prompt)
            print("Transcription received from ", self.users[id], ":", response.text, "Request ID:", response.request_id)
            self.transcriptions[id].append(response)
            await self.send_back_transcript(id)


    async def connect(self, websocket : WebSocket) :
        await websocket.accept()
        username = websocket.query_params['username']
        # print(username +" is joining")
        userid =  str(uuid.uuid4())
        self.connections[userid] = websocket
        self.users[userid] = username 
        self.transcriptions[userid] = []
        # print("User Created ", self.users[str(id)])
        return userid

    async def send_back_transcript(self,id : str):
        ws = self.connections[id]
        transcriptions = self.transcriptions[id]
        messages = []
        for transcription in transcriptions:
            messages.append({
                'role': 'user',
                'content': transcription.text,
            })
        await ws.send_json({
            'messages': messages,
        })
        print("Sent back transcript to ", self.users[id])
    
    async def disconnect(self, id : str ):
        await self.connections[id].close()
        del self.connections[id]
        del self.users[id]
        print("User disconnected ", id)


manager = ConnectionManager()

@app.websocket("/ws")
async def websocket_endpoint(websocket : WebSocket): 
        id = await manager.connect(websocket)         
        try :
            while True :
                await manager.receive_message(id)
        except Exception as e :  
            print(f"Error: {e}")
        finally:
            await manager.disconnect(id)
            
